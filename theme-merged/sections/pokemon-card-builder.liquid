{% comment %}
  Pokemon Card Collection Builder Section
  Allows users to build custom card collection pages
{% endcomment %}

<style>
  .card-builder-hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4rem 2rem;
    text-align: center;
    margin-bottom: 3rem;
  }
  
  .card-builder-hero h1 {
    font-size: 3rem;
    font-weight: 800;
    margin-bottom: 1rem;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }
  
  .card-builder-hero p {
    font-size: 1.25rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }
  
  .builder-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  .builder-option {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-align: center;
  }
  
  .builder-option:hover {
    transform: translateY(-8px);
    box-shadow: 0 16px 48px rgba(0,0,0,0.15);
  }
  
  .option-preview {
    width: 120px;
    height: 90px;
    margin: 0 auto 1.5rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    display: grid;
    gap: 2px;
    padding: 8px;
    background: #f9fafb;
  }
  
  .preview-3x3 {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
  }
  
  .preview-4x3 {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(3, 1fr);
  }
  
  .preview-card {
    background: #3b82f6;
    border-radius: 2px;
  }
  
  .option-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }
  
  .option-description {
    color: #6b7280;
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }
  
  .option-features {
    list-style: none;
    padding: 0;
    margin-bottom: 2rem;
  }
  
  .option-features li {
    color: #10b981;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
  }
  
  .option-features li:before {
    content: "✓ ";
    font-weight: bold;
    margin-right: 0.5rem;
  }
  
  .create-page-btn {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
    width: 100%;
  }
  
  .create-page-btn:hover {
    transform: scale(1.05);
  }
  
  .how-it-works {
    max-width: 800px;
    margin: 4rem auto 0;
    padding: 0 2rem;
  }
  
  .how-it-works h2 {
    text-align: center;
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 3rem;
  }
  
  .steps {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
  }
  
  .step {
    text-align: center;
    padding: 1.5rem;
  }
  
  .step-number {
    width: 48px;
    height: 48px;
    background: #3b82f6;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 1.25rem;
    margin: 0 auto 1rem;
  }
  
  .step h3 {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }
  
  .step p {
    color: #6b7280;
    font-size: 0.875rem;
    line-height: 1.6;
  }
  
  @media (max-width: 768px) {
    .card-builder-hero h1 {
      font-size: 2rem;
    }
    
    .builder-options {
      grid-template-columns: 1fr;
      padding: 0 1rem;
    }
  }
</style>

<div class="pokemon-card-builder" id="card-builder">
  <div class="card-builder-hero">
    <h1>{{ section.settings.hero_title | default: 'Create Your Pokemon Card Collection' }}</h1>
    <p>{{ section.settings.hero_description | default: 'Build custom card collection pages and let customers buy individual cards or complete sets' }}</p>
  </div>
  
  <div class="builder-options">
    <div class="builder-option">
      <div class="option-preview preview-3x3">
        {% for i in (1..9) %}
          <div class="preview-card"></div>
        {% endfor %}
      </div>
      <h3 class="option-title">3x3 Collection</h3>
      <p class="option-description">Perfect for showcasing a curated set of 9 Pokemon cards in a clean, balanced layout.</p>
      <ul class="option-features">
        <li>9 card slots</li>
        <li>Individual buy buttons</li>
        <li>Collection bundle pricing</li>
        <li>Mobile responsive</li>
      </ul>
      <button class="create-page-btn" onclick="openPageBuilder('3x3')">
        Create 3x3 Collection Page
      </button>
    </div>
    
    <div class="builder-option">
      <div class="option-preview preview-4x3">
        {% for i in (1..12) %}
          <div class="preview-card"></div>
        {% endfor %}
      </div>
      <h3 class="option-title">4x3 Collection</h3>
      <p class="option-description">Ideal for larger collections with 12 cards, great for themed sets or evolution chains.</p>
      <ul class="option-features">
        <li>12 card slots</li>
        <li>Individual buy buttons</li>
        <li>Collection bundle pricing</li>
        <li>Compact mobile view</li>
      </ul>
      <button class="create-page-btn" onclick="openPageBuilder('4x3')">
        Create 4x3 Collection Page
      </button>
    </div>
  </div>
  
  {% if section.settings.show_instructions %}
    <div class="how-it-works">
      <h2>How It Works</h2>
      <div class="steps">
        <div class="step">
          <div class="step-number">1</div>
          <h3>Choose Layout</h3>
          <p>Select either a 3x3 or 4x3 grid layout based on your collection size and design preference.</p>
        </div>
        <div class="step">
          <div class="step-number">2</div>
          <h3>Create Page</h3>
          <p>Add a new page in your Shopify admin and insert the Pokemon card grid section.</p>
        </div>
        <div class="step">
          <div class="step-number">3</div>
          <h3>Add Products</h3>
          <p>Configure each card slot with your Pokemon card products from your inventory.</p>
        </div>
        <div class="step">
          <div class="step-number">4</div>
          <h3>Set Pricing</h3>
          <p>Individual cards show their own prices, plus set a bundle price for the complete collection.</p>
        </div>
      </div>
    </div>
  {% endif %}
</div>

<div id="instructions-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1000; padding: 2rem;">
  <div style="background: white; max-width: 600px; margin: 2rem auto; padding: 2rem; border-radius: 16px; max-height: 80vh; overflow-y: auto;">
    <h3 id="modal-title">Create Collection Page</h3>
    <div id="modal-content"></div>
    <button onclick="closeInstructions()" style="background: #6b7280; color: white; border: none; padding: 8px 16px; border-radius: 6px; margin-top: 1rem;">Close</button>
  </div>
</div>

<!-- Full Screen Page Builder Modal -->
<div id="page-builder-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.95); z-index: 10000; overflow-y: auto;">
  <div class="page-builder-modal-content" style="width: 100%; min-height: 100%; background: white;">
    <div style="position: sticky; top: 0; background: white; z-index: 10001; padding: 1rem; border-bottom: 1px solid #e1e5e9; display: flex; justify-content: between; align-items: center;">
      <h2 style="margin: 0; font-size: 1.5rem;">Pokemon Collection Builder</h2>
      <button onclick="closePageBuilder()" style="background: #ef4444; color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; margin-left: auto;">
        Close Builder
      </button>
    </div>
    <div id="modal-page-builder">
      <!-- Page builder content will be loaded here -->
    </div>
  </div>
</div>

<script>
function openPageBuilder(layout) {
  const modal = document.getElementById('page-builder-modal');
  const content = document.getElementById('modal-page-builder');
  
  // Show the modal
  modal.style.display = 'block';
  document.body.style.overflow = 'hidden';
  
  // Load the page builder content
  loadPageBuilderContent(layout, content);
}

function closePageBuilder() {
  const modal = document.getElementById('page-builder-modal');
  modal.style.display = 'none';
  document.body.style.overflow = '';
}

function loadPageBuilderContent(layout, container) {
  // Create the page builder HTML structure
  const pageBuilderHTML = `
    <div class="pokemon-page-builder" style="padding: 2rem;">
      <div class="page-builder-header" style="text-align: center; margin-bottom: 2rem;">
        <h1 style="font-size: 2.5rem; margin-bottom: 0.5rem;">Create Your Pokemon Collection Page</h1>
        <p style="font-size: 1.1rem; color: #6b7280;">Build custom Pokemon card collection pages with our interactive builder</p>
      </div>

      <div class="page-builder-container" style="display: grid; grid-template-columns: 300px 1fr; gap: 2rem; max-width: 1400px; margin: 0 auto;">
        <!-- Builder Controls -->
        <div class="builder-controls" style="background: rgba(255, 255, 255, 0.95); border-radius: 12px; padding: 1.5rem; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); height: fit-content;">
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; margin-bottom: 0.5rem;">Page Layout:</label>
            <select id="pageLayout" style="width: 100%; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 8px;">
              <option value="3x3" ${layout === '3x3' ? 'selected' : ''}>3x3 Grid (9 cards)</option>
              <option value="4x3" ${layout === '4x3' ? 'selected' : ''}>4x3 Grid (12 cards)</option>
              <option value="2x4">2x4 Grid (8 cards)</option>
            </select>
          </div>

          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; margin-bottom: 0.5rem;">Page Title:</label>
            <input type="text" id="pageTitle" placeholder="My Pokemon Collection" maxlength="50" style="width: 100%; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 8px;">
          </div>

          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; margin-bottom: 0.5rem;">Collection Theme:</label>
            <select id="collectionTheme" style="width: 100%; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 8px;">
              <option value="classic">Classic</option>
              <option value="modern">Modern</option>
              <option value="vintage">Vintage</option>
              <option value="holographic">Holographic</option>
            </select>
          </div>

          <div style="margin-bottom: 1.5rem;">
            <button id="toggleBrowser" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; padding: 1rem 2rem; border-radius: 12px; width: 100%; font-weight: 600; cursor: pointer;">
              🔍 Browse Pokemon Cards
            </button>
          </div>

          <div>
            <button id="clearAll" style="background: #f1f5f9; color: #475569; border: none; padding: 0.75rem 1rem; border-radius: 8px; margin-right: 0.5rem; cursor: pointer;">Clear All</button>
            <button id="saveCollection" style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); color: white; border: none; padding: 0.75rem 1rem; border-radius: 8px; cursor: pointer;">Save</button>
          </div>
        </div>

        <!-- Main Builder Area -->
        <div class="builder-main" style="background: rgba(255, 255, 255, 0.95); border-radius: 12px; padding: 2rem; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);">
          <div class="preview-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; border-bottom: 2px solid #e1e5e9; padding-bottom: 1rem;">
            <h3 id="previewTitle" style="font-size: 1.8rem; margin: 0;">My Pokemon Collection</h3>
            <div>
              <button id="previewMode" style="padding: 0.5rem 1rem; border: 2px solid #e1e5e9; background: white; border-radius: 6px; margin-right: 0.5rem; cursor: pointer;">Preview</button>
              <button id="editMode" style="padding: 0.5rem 1rem; background: #3b82f6; color: white; border: 2px solid #3b82f6; border-radius: 6px; cursor: pointer;">Edit</button>
            </div>
          </div>

          <!-- Dynamic Grid Container -->
          <div id="cardGrid" class="card-grid grid-${layout}" style="display: grid; gap: 1rem; margin-bottom: 2rem; padding: 1rem; background: linear-gradient(135deg, #f8fafc, #e2e8f0); border-radius: 12px; border: 2px dashed #cbd5e1; min-height: 400px; grid-template-columns: repeat(${layout === '4x3' ? '4' : layout === '2x4' ? '2' : '3'}, 1fr);">
            <!-- Grid slots will be generated dynamically -->
          </div>

          <!-- Pricing Section -->
          <div class="pricing-section" style="margin-top: 2rem;">
            <div style="background: linear-gradient(135deg, #fef3c7, #fbbf24); padding: 2rem; border-radius: 12px; box-shadow: 0 4px 20px rgba(251, 191, 36, 0.2);">
              <h3 style="text-align: center; margin-bottom: 1.5rem; color: #92400e;">Your Collection Pricing</h3>
              <div style="margin-bottom: 2rem;">
                <div style="display: flex; justify-content: space-between; padding: 0.75rem 0; border-bottom: 1px solid rgba(146, 64, 14, 0.2);">
                  <span>Base Page Cost:</span>
                  <span id="baseCost">$15.00</span>
                </div>
                <div style="display: flex; justify-content: space-between; padding: 0.75rem 0; border-bottom: 1px solid rgba(146, 64, 14, 0.2);">
                  <span>Cards Selected:</span>
                  <span id="cardCount">0</span>
                </div>
                <div style="display: flex; justify-content: space-between; padding: 0.75rem 0; border-bottom: 1px solid rgba(146, 64, 14, 0.2);">
                  <span>Card Cost:</span>
                  <span id="cardCost">$0.00</span>
                </div>
                <div style="display: flex; justify-content: space-between; font-weight: bold; font-size: 1.2rem; padding-top: 1rem; border-top: 2px solid #92400e; margin-top: 0.5rem;">
                  <span>Total Cost:</span>
                  <span id="totalCost">$15.00</span>
                </div>
              </div>
              <button id="addToCart" style="background: linear-gradient(135deg, #dc2626, #b91c1c); color: white; border: none; padding: 1rem 2rem; border-radius: 12px; font-size: 1.2rem; font-weight: 600; cursor: pointer; width: 100%;" disabled>
                Add Collection to Cart
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  
  container.innerHTML = pageBuilderHTML;
  
  // Initialize the grid
  generateGrid(layout);
  
  // Add event listeners
  setupModalEventListeners();
}

function generateGrid(layout) {
  const grid = document.getElementById('cardGrid');
  let totalSlots;
  
  switch(layout) {
    case '3x3': totalSlots = 9; break;
    case '4x3': totalSlots = 12; break;
    case '2x4': totalSlots = 8; break;
    default: totalSlots = 9;
  }
  
  grid.innerHTML = '';
  
  for (let i = 0; i < totalSlots; i++) {
    const slot = document.createElement('div');
    slot.className = 'card-slot';
    slot.dataset.slotIndex = i;
    slot.style.cssText = `
      aspect-ratio: 2.5/3.5;
      background: white;
      border: 2px dashed #cbd5e1;
      border-radius: 12px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    `;
    
    slot.innerHTML = `
      <div style="text-align: center; color: #94a3b8; font-size: 0.9rem;">
        <div style="font-size: 2rem; margin-bottom: 0.5rem; opacity: 0.5;">🎴</div>
        <div>Click to add card</div>
      </div>
    `;
    
    slot.addEventListener('click', () => {
      alert('Pokemon card browser coming soon! This would open the card selection interface.');
    });
    
    slot.addEventListener('mouseenter', () => {
      slot.style.borderColor = '#3b82f6';
      slot.style.background = '#f0f9ff';
      slot.style.transform = 'translateY(-2px)';
    });
    
    slot.addEventListener('mouseleave', () => {
      slot.style.borderColor = '#cbd5e1';
      slot.style.background = 'white';
      slot.style.transform = 'translateY(0)';
    });
    
    grid.appendChild(slot);
  }
}

function setupModalEventListeners() {
  // Layout change
  document.getElementById('pageLayout').addEventListener('change', (e) => {
    generateGrid(e.target.value);
    const grid = document.getElementById('cardGrid');
    const layout = e.target.value;
    grid.className = \`card-grid grid-\${layout}\`;
    grid.style.gridTemplateColumns = \`repeat(\${layout === '4x3' ? '4' : layout === '2x4' ? '2' : '3'}, 1fr)\`;
  });

  // Title change
  document.getElementById('pageTitle').addEventListener('input', (e) => {
    document.getElementById('previewTitle').textContent = e.target.value || 'My Pokemon Collection';
  });

  // Clear all
  document.getElementById('clearAll').addEventListener('click', () => {
    if (confirm('Clear all cards?')) {
      generateGrid(document.getElementById('pageLayout').value);
    }
  });

  // Save collection
  document.getElementById('saveCollection').addEventListener('click', () => {
    alert('Collection saved! This would save your collection data.');
  });

  // Add to cart
  document.getElementById('addToCart').addEventListener('click', () => {
    alert('Add to cart functionality would redirect to checkout here.');
  });

  // Browse cards
  document.getElementById('toggleBrowser').addEventListener('click', () => {
    openPokemonBrowser();
  });
}

// Pokemon Card Browser Modal
function openPokemonBrowser() {
  if (document.getElementById('pokemon-browser-modal')) {
    document.getElementById('pokemon-browser-modal').style.display = 'block';
    return;
  }
  
  const browserModalHTML = \`
    <div id="pokemon-browser-modal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 10002; display: flex; align-items: center; justify-content: center;">
      <div style="background: white; width: 90%; max-width: 800px; height: 80%; border-radius: 12px; overflow: hidden; display: flex; flex-direction: column;">
        <div style="padding: 1rem; border-bottom: 1px solid #e1e5e9; display: flex; justify-content: space-between; align-items: center;">
          <h3 style="margin: 0;">Browse Pokemon Cards</h3>
          <button onclick="closePokemonBrowser()" style="background: #ef4444; color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer;">Close</button>
        </div>
        <div style="flex: 1; overflow: hidden;">
          <div id="pokemon-browser-content" style="height: 100%; overflow-y: auto;">
            <!-- Browser content will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  \`;
  
  document.body.insertAdjacentHTML('beforeend', browserModalHTML);
  loadPokemonBrowser();
}

function closePokemonBrowser() {
  const modal = document.getElementById('pokemon-browser-modal');
  if (modal) {
    modal.remove();
  }
}

function loadPokemonBrowser() {
  const content = document.getElementById('pokemon-browser-content');
  
  const browserHTML = \`
    <div class="pokemon-tcg-browser" style="padding: 1rem; height: 100%; display: flex; flex-direction: column;">
      <div class="browser-search" style="margin-bottom: 1rem;">
        <input type="text" id="modalCardSearch" placeholder="Search cards..." style="width: 100%; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 8px;">
      </div>
      
      <div class="browser-tabs" style="display: flex; gap: 0.5rem; margin-bottom: 1rem;">
        <button class="modal-tab-btn active" data-tab="eras" style="flex: 1; padding: 0.75rem; border: 2px solid #e1e5e9; background: #3b82f6; color: white; border-radius: 8px; cursor: pointer;">Eras</button>
        <button class="modal-tab-btn" data-tab="sets" style="flex: 1; padding: 0.75rem; border: 2px solid #e1e5e9; background: white; border-radius: 8px; cursor: pointer;">Sets</button>
        <button class="modal-tab-btn" data-tab="cards" style="flex: 1; padding: 0.75rem; border: 2px solid #e1e5e9; background: white; border-radius: 8px; cursor: pointer;">Cards</button>
      </div>
      
      <div class="browser-content" style="flex: 1; overflow-y: auto;">
        <div id="modalErasTab" class="modal-tab-content active">
          <div class="eras-grid" style="display: grid; gap: 0.5rem;">
            <div class="modal-era-item" data-era="vintage" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Vintage (1998-1999)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Original Base Set era</p>
            </div>
            <div class="modal-era-item" data-era="neo" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Neo Series (2000-2001)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Neo Genesis, Discovery, Destiny</p>
            </div>
            <div class="modal-era-item" data-era="ecard" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">e-Card Series (2002-2003)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Digital integration era</p>
            </div>
            <div class="modal-era-item" data-era="ex" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">EX Series (2003-2007)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Pokemon-ex introduction</p>
            </div>
            <div class="modal-era-item" data-era="dp" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Diamond & Pearl (2007-2009)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Sinnoh region cards</p>
            </div>
            <div class="modal-era-item" data-era="hgss" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">HeartGold SoulSilver (2009-2011)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Johto region return</p>
            </div>
            <div class="modal-era-item" data-era="bw" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Black & White (2011-2013)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Unova region cards</p>
            </div>
            <div class="modal-era-item" data-era="xy" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">XY Series (2014-2016)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Kalos region and Mega Evolution</p>
            </div>
            <div class="modal-era-item" data-era="sm" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Sun & Moon (2017-2019)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Alola region and GX cards</p>
            </div>
            <div class="modal-era-item" data-era="swsh" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Sword & Shield (2020-2022)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Galar region and V cards</p>
            </div>
            <div class="modal-era-item" data-era="sv" style="padding: 1rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
              <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">Scarlet & Violet (2023+)</h4>
              <p style="margin: 0; font-size: 0.8rem; color: #6b7280;">Paldea region and current sets</p>
            </div>
          </div>
        </div>
        
        <div id="modalSetsTab" class="modal-tab-content" style="display: none;">
          <div class="modal-sets-loading" style="text-align: center; padding: 2rem; color: #6b7280;">
            <p>Select an era to view sets</p>
          </div>
          <div class="modal-sets-grid" style="display: none; gap: 0.75rem;"></div>
        </div>
        
        <div id="modalCardsTab" class="modal-tab-content" style="display: none;">
          <div class="modal-cards-loading" style="text-align: center; padding: 2rem; color: #6b7280;">
            <p>Select a set to view cards</p>
          </div>
          <div class="modal-cards-grid" style="display: none; gap: 0.75rem;"></div>
        </div>
      </div>
    </div>
  \`;
  
  content.innerHTML = browserHTML;
  initModalBrowser();
}

function initModalBrowser() {
  const API_KEY = '27cc9548-6ecd-4502-8b2d-267e2ef1bb61';
  const API_BASE = 'https://api.pokemontcg.io/v2';
  
  let currentEra = null;
  let currentSet = null;
  let selectedSlot = null;
  
  // Era mappings to API queries - Simplified without quotes
  const eraQueries = {
    vintage: 'series:Base',
    neo: 'name:Neo*',
    ecard: 'name:*Card*',
    ex: 'name:*EX* OR series:EX*',
    dp: 'name:*Diamond* OR name:*Pearl* OR name:*Platinum*',
    hgss: 'name:*HeartGold* OR name:*SoulSilver* OR name:*Call*',
    bw: 'name:*Black* OR name:*White* OR name:*Plasma*',
    xy: 'series:XY OR name:XY*',
    sm: 'name:*Sun* OR name:*Moon* OR series:*Sun*',
    swsh: 'name:*Sword* OR name:*Shield* OR name:*Battle* OR name:*Rebel*',
    sv: 'name:*Scarlet* OR name:*Violet* OR name:*Paldea*'
  };
  
  // Tab switching
  document.querySelectorAll('.modal-tab-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const tabName = e.target.dataset.tab;
      switchModalTab(tabName);
    });
  });
  
  // Era selection
  document.querySelectorAll('.modal-era-item').forEach(item => {
    item.addEventListener('click', (e) => {
      const era = e.currentTarget.dataset.era;
      selectModalEra(era);
    });
    
    // Hover effects
    item.addEventListener('mouseenter', (e) => {
      e.target.style.borderColor = '#3b82f6';
      e.target.style.background = '#f0f9ff';
    });
    
    item.addEventListener('mouseleave', (e) => {
      e.target.style.borderColor = '#e1e5e9';
      e.target.style.background = 'white';
    });
  });
  
  function switchModalTab(tabName) {
    // Update tab buttons
    document.querySelectorAll('.modal-tab-btn').forEach(btn => {
      if (btn.dataset.tab === tabName) {
        btn.style.background = '#3b82f6';
        btn.style.color = 'white';
        btn.style.borderColor = '#3b82f6';
      } else {
        btn.style.background = 'white';
        btn.style.color = 'black';
        btn.style.borderColor = '#e1e5e9';
      }
    });
    
    // Update tab content
    document.querySelectorAll('.modal-tab-content').forEach(content => {
      content.style.display = content.id === 'modal' + tabName.charAt(0).toUpperCase() + tabName.slice(1) + 'Tab' ? 'block' : 'none';
    });
  }
  
  async function selectModalEra(era) {
    currentEra = era;
    switchModalTab('sets');
    
    const setsGrid = document.querySelector('.modal-sets-grid');
    const setsLoading = document.querySelector('.modal-sets-loading');
    
    setsLoading.innerHTML = '<div style="display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3; border-top: 3px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 0.5rem;"></div>Loading sets...';
    setsLoading.style.display = 'block';
    setsGrid.style.display = 'none';
    
    try {
      console.log('Fetching all sets and filtering for era:', era);
      
      // Fetch all sets and filter client-side for better reliability
      const response = await fetch(\`\${API_BASE}/sets?pageSize=250\`, {
        headers: { 'X-Api-Key': API_KEY }
      });
      
      if (!response.ok) {
        throw new Error(\`HTTP error! status: \${response.status}\`);
      }
      
      const data = await response.json();
      console.log('Fetched', data.data?.length || 0, 'total sets');
      
      // Filter sets client-side based on era characteristics
      const sets = filterSetsByEra(data.data || [], era);
      console.log('Filtered to', sets.length, 'sets for era:', era);
      
      displayModalSets(sets);
    } catch (error) {
      console.error('Error fetching sets:', error);
      setsLoading.innerHTML = \`Error loading sets: \${error.message}. Please try again.\`;
    }
  }
  
  function filterSetsByEra(allSets, era) {
    console.log('Filtering', allSets.length, 'sets for era:', era);
    
    // Comprehensive era filtering based on series and set names from API data
    const eraFilters = {
      vintage: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series === 'base' || 
               name.includes('base') || 
               name.includes('jungle') || 
               name.includes('fossil') ||
               (set.releaseDate && set.releaseDate.startsWith('1999'));
      },
      
      neo: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('neo') || 
               name.includes('neo') ||
               (set.releaseDate && (set.releaseDate.startsWith('2000') || set.releaseDate.startsWith('2001')));
      },
      
      ecard: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('e-card') || 
               name.includes('e-card') || 
               name.includes('expedition') || 
               name.includes('aquapolis') || 
               name.includes('skyridge') ||
               (set.releaseDate && (set.releaseDate.startsWith('2002') || set.releaseDate.startsWith('2003')));
      },
      
      ex: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('ex') || 
               name.includes('ex ') || 
               name.includes('ruby') || 
               name.includes('sapphire') || 
               name.includes('emerald') || 
               name.includes('firered') || 
               name.includes('leafgreen') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2003 && parseInt(set.releaseDate.substring(0, 4)) <= 2007));
      },
      
      dp: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('diamond') || 
               series.includes('pearl') || 
               series.includes('platinum') || 
               name.includes('diamond') || 
               name.includes('pearl') || 
               name.includes('platinum') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2007 && parseInt(set.releaseDate.substring(0, 4)) <= 2009));
      },
      
      hgss: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('heartgold') || 
               series.includes('soulsilver') || 
               name.includes('heartgold') || 
               name.includes('soulsilver') || 
               name.includes('call of legends') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2009 && parseInt(set.releaseDate.substring(0, 4)) <= 2011));
      },
      
      bw: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('black') || 
               series.includes('white') || 
               name.includes('black') || 
               name.includes('white') || 
               name.includes('plasma') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2011 && parseInt(set.releaseDate.substring(0, 4)) <= 2013));
      },
      
      xy: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('xy') || 
               name.includes('xy') || 
               name.includes('kalos') || 
               name.includes('flashfire') || 
               name.includes('furious') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2014 && parseInt(set.releaseDate.substring(0, 4)) <= 2016));
      },
      
      sm: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('sun') || 
               series.includes('moon') || 
               name.includes('sun') || 
               name.includes('moon') || 
               name.includes('alola') || 
               name.includes('guardians') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2017 && parseInt(set.releaseDate.substring(0, 4)) <= 2019));
      },
      
      swsh: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('sword') || 
               series.includes('shield') || 
               name.includes('sword') || 
               name.includes('shield') || 
               name.includes('rebel') || 
               name.includes('darkness') || 
               name.includes('vivid') || 
               name.includes('battle styles') ||
               (set.releaseDate && (parseInt(set.releaseDate.substring(0, 4)) >= 2020 && parseInt(set.releaseDate.substring(0, 4)) <= 2022));
      },
      
      sv: (set) => {
        const series = set.series?.toLowerCase() || '';
        const name = set.name?.toLowerCase() || '';
        return series.includes('scarlet') || 
               series.includes('violet') || 
               name.includes('scarlet') || 
               name.includes('violet') || 
               name.includes('paldea') ||
               (set.releaseDate && parseInt(set.releaseDate.substring(0, 4)) >= 2023);
      }
    };
    
    const filtered = allSets.filter(eraFilters[era] || (() => false));
    console.log('Filtered to', filtered.length, 'sets for era:', era);
    
    // Sort by release date (newest first) and limit results
    return filtered
      .sort((a, b) => new Date(b.releaseDate) - new Date(a.releaseDate))
      .slice(0, 15); // Limit to 15 sets per era
  }
  
  function displayModalSets(sets) {
    const setsGrid = document.querySelector('.modal-sets-grid');
    const setsLoading = document.querySelector('.modal-sets-loading');
    
    if (sets.length === 0) {
      setsLoading.innerHTML = 'No sets found for this era.';
      return;
    }
    
    setsGrid.innerHTML = sets.map(set => \`
      <div class="modal-set-item" data-set-id="\${set.id}" style="padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer; text-align: center;">
        <img src="\${set.images?.logo || set.images?.symbol}" alt="\${set.name}" style="width: 40px; height: 40px; margin-bottom: 0.5rem;">
        <h4 style="margin: 0 0 0.25rem 0; font-size: 0.9rem;">\${set.name}</h4>
        <p style="margin: 0 0 0.25rem 0; font-size: 0.8rem; color: #6b7280;">\${set.releaseDate || 'Unknown date'}</p>
        <small style="font-size: 0.7rem; color: #9ca3af;">\${set.total || 0} cards</small>
      </div>
    \`).join('');
    
    setsLoading.style.display = 'none';
    setsGrid.style.display = 'grid';
    
    // Add click listeners to sets
    document.querySelectorAll('.modal-set-item').forEach(item => {
      item.addEventListener('click', (e) => {
        const setId = e.currentTarget.dataset.setId;
        selectModalSet(setId);
      });
      
      // Hover effects
      item.addEventListener('mouseenter', (e) => {
        e.currentTarget.style.borderColor = '#10b981';
        e.currentTarget.style.background = '#f0fdf4';
      });
      
      item.addEventListener('mouseleave', (e) => {
        e.currentTarget.style.borderColor = '#e1e5e9';
        e.currentTarget.style.background = 'white';
      });
    });
  }
  
  async function selectModalSet(setId) {
    currentSet = setId;
    switchModalTab('cards');
    
    const cardsGrid = document.querySelector('.modal-cards-grid');
    const cardsLoading = document.querySelector('.modal-cards-loading');
    
    cardsLoading.innerHTML = '<div style="display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3; border-top: 3px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 0.5rem;"></div>Loading cards...';
    cardsLoading.style.display = 'block';
    cardsGrid.style.display = 'none';
    
    try {
      const response = await fetch(\`\${API_BASE}/cards?q=set.id:\${setId}&pageSize=50\`, {
        headers: { 'X-Api-Key': API_KEY }
      });
      
      const data = await response.json();
      displayModalCards(data.data || []);
    } catch (error) {
      console.error('Error fetching cards:', error);
      cardsLoading.innerHTML = 'Error loading cards. Please try again.';
    }
  }
  
  function displayModalCards(cards) {
    const cardsGrid = document.querySelector('.modal-cards-grid');
    const cardsLoading = document.querySelector('.modal-cards-loading');
    
    if (cards.length === 0) {
      cardsLoading.innerHTML = 'No cards found in this set.';
      return;
    }
    
    cardsGrid.innerHTML = cards.map(card => \`
      <div class="modal-card-item" data-card-data='\${JSON.stringify(card)}' style="display: flex; flex-direction: column; align-items: center; padding: 0.75rem; border: 2px solid #e1e5e9; border-radius: 8px; cursor: pointer;">
        <img src="\${card.images?.small}" alt="\${card.name}" loading="lazy" style="width: 80px; height: auto; border-radius: 4px; margin-bottom: 0.5rem;">
        <h5 style="margin: 0 0 0.25rem 0; font-size: 0.8rem; font-weight: 600; text-align: center;">\${card.name}</h5>
        <small style="font-size: 0.7rem; color: #6b7280;">\${card.number}/\${card.set.total}</small>
      </div>
    \`).join('');
    
    cardsLoading.style.display = 'none';
    cardsGrid.style.display = 'grid';
    
    // Add click listeners to cards
    document.querySelectorAll('.modal-card-item').forEach(item => {
      item.addEventListener('click', (e) => {
        const cardData = JSON.parse(e.currentTarget.dataset.cardData);
        selectModalCard(cardData);
      });
      
      // Hover effects
      item.addEventListener('mouseenter', (e) => {
        e.currentTarget.style.borderColor = '#10b981';
        e.currentTarget.style.background = '#f0fdf4';
      });
      
      item.addEventListener('mouseleave', (e) => {
        e.currentTarget.style.borderColor = '#e1e5e9';
        e.currentTarget.style.background = 'white';
      });
    });
  }
  
  function selectModalCard(cardData) {
    alert(\`Selected: \${cardData.name}\\nSet: \${cardData.set.name}\\n\\nThis would now add the card to your collection grid!\`);
    // Here you would add the card to the selected slot in the grid
    closePokemonBrowser();
  }
}

// Add CSS animation for spinner
const style = document.createElement('style');
style.textContent = \`
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
\`;
document.head.appendChild(style);

// Close modal when clicking outside
document.getElementById('page-builder-modal').addEventListener('click', function(e) {
  if (e.target === this) {
    closePageBuilder();
  }
});
</script>

{% schema %}
{
  "name": "Pokemon Card Builder",
  "settings": [
    {
      "type": "text",
      "id": "hero_title",
      "label": "Hero Title",
      "default": "Create Your Pokemon Card Collection"
    },
    {
      "type": "textarea",
      "id": "hero_description",
      "label": "Hero Description",
      "default": "Build custom card collection pages and let customers buy individual cards or complete sets"
    },
    {
      "type": "checkbox",
      "id": "show_instructions",
      "label": "Show 'How It Works' section",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Pokemon Card Builder"
    }
  ]
}
{% endschema %}